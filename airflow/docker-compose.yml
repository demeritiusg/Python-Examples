services:
  airflow-scheduler:
    image: apache/airflow:2.10.0
    container_name: airflow_scheduler
    restart: always    
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - airflow-init
      - postgres

  airflow-webserver:
    image: apache/airflow:2.10.0
    container_name: airflow_webserver
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor      
    command: webserver
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - airflow-init
      - postgres

  airflow-worker:
    image: apache/airflow:2.10.0
    container_name: airflow_worker
    restart: always
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=Celery_Executor      
    command: celery worker
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - airflow-init
      - postgres

  airflow-init:
    image: apache/airflow:2.10.0
    container_name: airflow_init
    restart: on-failure
    env_file:
      - .env
    environment:
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    command: bash -c "airflow db upgrade && airflow users create -r Admin -u $${_AIRFLOW_WWW_USER_USERNAME} -p $${_AIRFLOW_WWW_USER_PASSWORD} -e admin@example.com -f admin -l user"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./pgdata:/var/lib/postgresql/data

  flower:
    image: apache/airflow:2.10.0
    container_name: flower
    restart: always
    ports:
      - "5555:5555"
    env_file:
      - .env
    environment:
      - AIRFLOW__CORE__EXECUTOR=Celery_Executor
    command: celery flower
    depends_on:
      - airflow-worker
        

volumes:
  pgdata:
  airflow_logs:

# networks:
#   default:
#     external:
#       name: airflow_network